<!-- views/partials/imports/roommates-angular.ejs -->
<script>
String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
String.prototype.capitalizeAll = function() {
    var words = this.split(' ');
    for(var i=0; i<words.length; i++) {
        words[i] = words[i].capitalize();
    }
    return words.join(' ');
};
var mailRecipients = [
    <% for(var i=0; i<user.mailRecipients.length; i++) { %>
        '<%- user.mailRecipients[i] %>',
    <% } %>
];
var factorsDict = {
    location: "Location",
    residenceType: "Residence type",
    ownBedroom: "Own bedroom",
    ownBathroom: "Own bathroom",
    commuteTime: "Short commute time",
    cleanliness: "Cleanliness",
    quietTime: "Quiet time",
    substanceFree: "Substance-free",
    sameGender: "Same gender",
    sameAge: "Same age",
    sameField: "Same field"
};
// Add spinner!
var opts = {
  lines: 11 // The number of lines to draw
, length: 9 // The length of each line
, width: 10 // The line thickness
, radius: 6 // The radius of the inner circle
, scale: 1.5 // Scales overall size of the spinner
, corners: 1 // Corner roundness (0..1)
, color: '#000' // #rgb or #rrggbb or array of colors
, opacity: 0.2 // Opacity of the lines
, rotate: 0 // The rotation offset
, direction: 1 // 1: clockwise, -1: counterclockwise
, speed: 1 // Rounds per second
, trail: 52 // Afterglow percentage
, fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
, zIndex: 2e9 // The z-index (defaults to 2000000000)
, className: 'spinner' // The CSS class to assign to the spinner
, top: '50px' // Top position relative to parent
, left: '50%' // Left position relative to parent
, shadow: false // Whether to render a shadow
, hwaccel: false // Whether to use hardware acceleration
, position: 'absolute' // Element positioning
}
var spinner = new Spinner(opts).spin();
function startSpinner(selector) {
    if(!selector)
        selector = '#roomiesContainer';
    spinner.spin();
    $(selector).append(spinner.el);
}
function stopSpinner() {
    spinner.stop();
}
$(document).ready(function() {
    startSpinner();
});
// pad() from: http://stackoverflow.com/a/10073788/3673087
function pad(n, width, z) {
    z = z || '0';
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}
// Handle profile card description 'Read more' click event.
function toggleReadMore(event, ele) {
    var descContainer = $(ele).parent('.desc');
    if($(ele).is('.more')) {
        $(ele).removeClass("more");
        $(ele).text("Less");
        descContainer.find('span').text(descContainer.attr('data-desc'));
    } else {
        $(ele).addClass("more");
        $(ele).text("More");
        descContainer.find('span').text(descContainer.attr('data-desc').substring(0,100)+"...");
    }
    event.preventDefault();
}
var app = angular.module('roommatesApp', []);
app.filter('dateFormat', function() {
    return function(dateString) {
        var options = {
            year: "numeric", month: "long"
        };
        return new Date(dateString+"-02").toLocaleDateString("en-US", options);
    };
});
app.filter('residenceFilter', function() {
    return function(hasPlace, preferences, currentResidence) {
        if(hasPlace) {
            return currentResidence.residenceType.capitalize();
        } else {
            return preferences.residenceType.capitalize();
        }
    };
});
app.filter('locationsFilter', function() {
    return function(locations) {
        return locations.join(', ');
    };
});
app.filter('aboutFilter', function() {
    return function(aboutMe) {
        // strip html
        return $('<p>'+aboutMe+'</p>').text();
    };
});
app.filter('peopleFilter', function() {
    return function(number) {
        var desc = number > 1 ? "people" : "person";
        return "+"+number+" "+desc;
    };
});
app.filter('factorsFilter', function() {
    return function(factors) {
        var sorted = [];
        for(var factor in factors) {
            sorted.push({ 
                factor: factor, 
                rating: factors[factor] 
            });
        }
        sorted.sort(function(a, b) {
            return b.rating - a.rating;
        });
        var mostImportant = [];
        for(var i=0; i<3; i++) {
            mostImportant.push(factorsDict[sorted[i].factor]);
        }
        return mostImportant.join(", ");
    };
});
app.filter('roommatesFilter', function() {
    return function(hasPlace, preferences, currentResidence) {
        if(hasPlace) {
            return currentResidence.vacantRooms.toString().capitalize();
        } else {
            return preferences.roommates.toString().capitalize();
        }
    };
});
app.directive('toolTip', function () {
    return function (scope, element, attrs) {
        $(element).tooltip();
    };
});
app.filter('resultsFilter', function() {
    return function(input, name, startDate, field, role, resType, status) {
        var output = [];
        angular.forEach(input, (roomie) => {
            var name_cond = !name || roomie.name.match(new RegExp(name, 'i')) !== null;
            var date_cond = !startDate || roomie.startDate == startDate;
            var field_cond = !field || roomie.field == field;
            var role_cond = !role || roomie.role == role;
            var resType_cond = !resType || 
                (roomie.preferences && roomie.preferences.residenceType == resType) ||
                (roomie.currentResidence && roomie.currentResidence.residenceType == resType);
            var status_cond = !status || roomie.hasPlace == (status == "has-place");
            // Only add this to output if all conditions are met.
            if(name_cond && date_cond && field_cond && role_cond && resType_cond && status_cond) {
                output.push(roomie);
            }
        });
        return output;
    };
});
app.controller('roomiesCtrl', ['$scope', '$http', 
    function($scope, $http) {
        // Init variables.
        // Always include location on page load.
        $scope.includeLocation = true;
        $scope.searchStartDateString = '<%= user.startDate %>';
        $scope.searchStartDate = new Date(($scope.searchStartDateString+'/01').replace('-','/'));
        $scope.locations = null;
        $scope.roomies = [];
        $scope.fields = [
            { value: "cloud", name: 'Google Cloud' },
            { value: "tech", name: "Engineering & Technology" },
            { value: "sales", name: "Sales, Service & Support" },
            { value: "marketing", name: "Marketing & Communications" },
            { value: "design", name: "Design" },
            { value: "business", name: "Business Strategy" },
            { value: "finance", name: "Finance" },
            { value: "legal", name: "Legal" },
            { value: "people", name: "People" },
            { value: "facilities", name: "Facilities" }
        ];
        // Find roommates.
        $scope.find = function() {
            startSpinner();
            var query = {
                name: $scope.searchName,
                startLocation: $scope.includeLocation ? $scope.searchStartLocation : ''
            };
            /* http post code adapted from: http://stackoverflow.com/a/23966224/3673087 */
            var xsrf = $.param({ query: query });
            $http({
                method: 'POST',
                url: '/api/search',
                data: xsrf,
                headers: {'Content-Type': 'application/x-www-form-urlencoded'}
            }).then(
                function (response) {
                    if(response.data.error) {
                        console.error("(Query: "+query+") Error: "+response.data.error);
                    } else {
                        $scope.roomies = response.data;
                    }
                    stopSpinner();
                }
            );
        };
        // Load google office locations.
        $http.get('data/locations.json').then(function(response) {
            var googleLocations = [];
            var locs = response.data.locations;
            var count = 0;
            for(var i=0; i<locs.length; i++) {
                var continent = locs[i].continent;
                for(var j=0; j<locs[i].cities.length; j++) {
                    googleLocations.push({ 
                        continent: continent,
                        city: locs[i].cities[j],
                        value: count
                    });
                    count++;
                }
            }
            $scope.locations = googleLocations;
            $scope.find();
        });
        $scope.userHasMessaged = function(recipientId) {
            return mailRecipients.includes(recipientId);
        };
        $scope.updateDateString = function() {
            $scope.searchStartDateString = 
                $scope.searchStartDate.getUTCFullYear() + '-' + 
                pad($scope.searchStartDate.getUTCMonth()+1, 2);
        };
    }
]);
</script>